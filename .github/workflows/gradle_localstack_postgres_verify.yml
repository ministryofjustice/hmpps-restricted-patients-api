name: Run gradle checks with localstack and postgres instances
on:
  workflow_call:
    inputs:
      java-version:
        type: string
        required: false
        default: '21'
      java-options:
        type: string
        default: ''
        required: false
      postgres-tag:
        type: string
        required: true
      postgres-password:
        type: string
        default: 'dev'
        required: false
      postgres-username:
        type: string
        default: 'root'
        required: true
      postgres-db:
        type: string
        default: 'postgres'
        required: false
      gradle-command:
        type: string
        default: './gradlew check'
        required: false
      services:
        type: string
        default: 's3,sqs,sns,es,ec2,lambda'
        required: false
      localstack-tag:
        type: string
        default: 'latest'
        required: false
permissions:
  contents: read
jobs:
  gradle-localstack-postgres-verify:
    runs-on: ubuntu-latest
    # Label used to access the service container
    services:
      postgres:
        # Docker Hub PostgreSQL image
        image: postgres:${{ inputs.postgres-tag }}
        # Provide the password for postgres
        env:
          POSTGRES_USER: ${{ inputs.postgres-username }}
          POSTGRES_PASSWORD: ${{ inputs.postgres-password }}
          POSTGRES_DB: ${{ inputs.postgres-db}}
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      localstack:
        image: localstack/localstack:${{ inputs.localstack-tag }}
        ports:
          - 4566:4566
          - 4571:4571
        env:
          ES_PORT_EXTERNAL: 4571
          DOCKER_HOST: 'unix:///var/run/docker.sock'
          AWS_EXECUTION_ENV: True
          PERSISTENCE: 1
          SERVICES: "${{ inputs.services }}"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '${{ inputs.java-version }}'
      - name: Validate the gradle wrapper
        uses: gradle/actions/wrapper-validation@v4
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Run checks with gradle
        shell: bash
        run: |
          export JAVA_OPTS="${{ inputs.java-options }}"
          ${{ inputs.gradle-command }}
      - name: Upload the artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: upload test results
          path: |
            build/test-results
            build/reports/tests
